{"version":3,"sources":["components/searchBar.jsx","components/youtube.jsx","components/videoItem.jsx","components/videoList.jsx","components/video.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","handleInputChange","event","_this","setState","target","value","handleFormSubmit","preventDefault","props","handleSubmit","react_default","a","createElement","className","style","marginTop","background","onSubmit","this","type","onChange","Component","axios","create","baseURL","params","part","maxResults","key","VideoItem","onClick","handleVideoSelect","video","alt","snippet","title","src","thumbnails","medium","url","VideoList","renderedList","videos","map","components_videoItem","id","videoId","SelectedVideo","videoSrc","concat","description","App","selectedVideo","_callee","response","regenerator_default","wrap","_context","prev","next","console","log","youtube","get","q","sent","data","items","stop","searchBar","components_video","videoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e1b5321.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n    state = { term : '' }\r\n\r\n    handleInputChange = event =>{        \r\n        this.setState({ term: event.target.value})  }\r\n\r\n    handleFormSubmit = event => {\r\n        event.preventDefault()\r\n        this.props.handleSubmit(this.state.term)  }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"ui segment search-bar\" style={{marginTop:'30px', background: 'rgba(34,36,38,.15)'}}>\r\n            <form onSubmit={this.handleFormSubmit} className=\"ui form\">\r\n            <div className=\"field\">\r\n                <label>Video Search</label>\r\n                <input type=\"text\"\r\n                       value={this.state.term}\r\n                       onChange={this.handleInputChange} />\r\n            </div>\r\n            </form>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import axios from 'axios'\r\n\r\nconst KEY = 'AIzaSyAcNr5LMxSEMcLwDIX54evmS0f8JbODg40'\r\n\r\nexport default axios.create ({\r\n          baseURL: 'https://www.googleapis.com/youtube/v3',\r\n          params: {\r\n            part : 'snippet',\r\n            maxResults : 5,\r\n            key : KEY \r\n          }\r\n})\r\n \r\n","import React, { Component } from 'react';\r\nimport './videoItem.css'\r\n\r\nconst VideoItem = (props) => {\r\n\r\n    return (\r\n\r\n        <div className='video-item item' onClick={() => props.handleVideoSelect(props.video)}>\r\n            <img className='ui image' alt={props.video.snippet.title} src={props.video.snippet.thumbnails.medium.url} />\r\n            <div className='content'>\r\n                <div className='header'> {props.video.snippet.title} </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default VideoItem;","import React, { Component } from 'react';\r\nimport VideoItem from './videoItem';\r\n\r\nconst VideoList = (props) => {\r\n   const renderedList = props.videos.map(video =>{\r\n   return <VideoItem key={video.id.videoId}\r\n                     video={video}\r\n                     handleVideoSelect={props.handleVideoSelect}/>\r\n    })\r\n    return <div className='ui relaxed divided list'>{renderedList}</div>\r\n}\r\n \r\nexport default VideoList;\r\n       ","import React, { Component } from 'react';\r\n\r\nconst SelectedVideo = (props) => {\r\n    if (!props.video) {\r\n        return <div>Loading...</div>\r\n    }\r\n    const videoSrc = `https://www.youtube.com/embed/${props.video.id.videoId}`\r\n    return (\r\n        <div>\r\n            <div className='ui embed'>\r\n                <iframe src={videoSrc}\r\n                />\r\n                </div>\r\n                <div className='ui segment' style={{background: 'rgba(34,36,38,.15)'}}>\r\n                <h4 className='ui header'>{props.video.snippet.title}</h4>\r\n                <p>{props.video.snippet.description}</p>\r\n\r\n                </div>\r\n                \r\n                    \r\n                \r\n                </div>\r\n    );\r\n}\r\n\r\nexport default SelectedVideo;","import React, { Component } from 'react';\nimport SearchBar from './components/searchBar';\nimport youtube from './components/youtube';\nimport VideoList from './components/videoList';\nimport SelectedVideo from './components/video';\n\n\nimport './App.css';\n\n\nclass App extends Component {\n    state={ videos: [], selectedVideo:null }\n\ncomponentDidMount(){\n  this.handleSubmit('buildings')\n}\n\nhandleSubmit = async (term) => {  \n  console.log(term)\n  const response = await youtube.get('/search', {\n   params: { \n   q: term}\n   })\n  this.setState({ videos: response.data.items,\n                  selectedVideo: response.data.items[0] })      \n    }\n  \n  handleVideoSelect = (video) => {\n    console.log('video', video)\n    this.setState({selectedVideo: video})\n  }\n  \n\n  render() {\n    return (\n           \n        <div className=\"ui container\">\n        <SearchBar handleSubmit={this.handleSubmit}/>\n        \n        <div className='ui grid'>\n          <div className='ui row'>\n            <div className='eleven wide column'>\n                <SelectedVideo video={this.state.selectedVideo}/></div>\n            <div className='five wide column'>\n                <VideoList videos={this.state.videos}\n                           handleVideoSelect={this.handleVideoSelect} />\n            </div>\n              </div>\n                </div></div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}